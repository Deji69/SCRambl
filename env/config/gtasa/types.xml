<?xml version="1.0" encoding="utf-8"?>

<!-- 
	This file is always loaded in order: VariableTypes, BasicTypes, ExtendedTypes, Translations
	
	
	Type Encoding Process
		COMMAD > ARG > TYPE > VALTYPE == VALTYPE < VALUE < PARSER TOKEN
									  \/
								SYMBOLIC TOKEN >
-->

<SCRambl Version="1.0" FileVersion="0.0.0.0">
	<VariableTypes>
		<Type Name="LVAR" Scope="local">
			<Width>32</Width>
			<Limit What="Index">32</Limit>
		</Type>
		<Type Name="VAR" Scope="global">
			<Width>32</Width>
			<Limit What="Index">9216</Limit>
		</Type>
		<Type Name="LVAR_ARRAY" Type="LVAR">
			<Array />
			<Width>16</Width>
			<Limit What="Index">255</Limit>
		</Type>
		<Type Name="VAR_ARRAY" Type="VAR">
			<Array />
			<Width>16</Width>
			<Limit What="Index">255</Limit>
		</Type>
	</VariableTypes>
	
	<!--
	Basic Types:
		Basic types are ones which represent the full external language, thus extended types can be built upon these
		A basic type is recognised directly by the script engine as its own entity
	-->
	<BasicTypes>
		<!--
		Value Types:
			<Type - Begin type declaration
			Name="" - Name of type
			| ID=""	- ID of type
			|| Hash="" - Attribute to use as hash ID
			>
				<Variable - Begin variable type specification
				Type="" - Basic variable type
				Value="" - Basic value type
				/> - End variable type specification
				
				<Array - Begin array type specification
				Type="" - Basic variable array type
				Value="" - Basic value type
				/> - End array type specification
			</Type> - End Type declaration
		-->
		<Type Name="NONE" />
		<Type Name="INT">
			<!-- 8 bit integer number -->
			<Number Type="int" Size="8" />
			<!-- 16 bit integer number -->
			<Number Type="int" Size="16" />
			<!-- 32 bit integer number -->
			<Number Type="int" Size="32" />
		</Type>
		<Type Name="FLOAT">
			<!-- 32 bit floating-point number -->
			<Number Type="float" Size="32" />
			
			<!-- GTA III only -->
			<!--<Number Type="float" Size="16" Mode="packed" />
			<Number Type="float" Size="24" Mode="packed" />
			<Number Type="float" Size="16" Mode="fixed" />-->
			<!-- Hypothetical -->
			<!--<Number Type="float" Size="64" />-->
		</Type>
		<Type Name="TEXT_LABEL">
			<!-- 8 character text string -->
			<Text Size="8" Mode="static" Terminate="null" />
			<!-- 16 character text string -->
			<Text Size="16" Mode="static" Terminate="null" />
		</Type>
		<Type Name="STRING">
			<!-- Variable-length text string with 255-character limit -->
			<Text Size="255" Mode="variable" Terminate="null" />
		</Type>
		
		<Type Name="COMMAND">
			<!-- Command with 16 bit integer ID -->
			<Command Type="int" Size="16" />
		</Type>
		
		<Type Name="LABEL">
			<!-- Label pointer with 32 bit range -->
			<Label Size="32" />
			
			<!-- 32 bit integer number (loose matching) -->
			<Number Match="loose" Type="int" Size="32" />
		</Type>
		
		<!--
		Variable Types:
			<Type - Begin type declaration
			Name="" - Name of type
			>
				<Variable - Begin variable type specification
				Type="" - Basic variable type
				Value="" - Basic value type
				/ > - End variable type specification
				
				<Array - Begin array type specification
				Type="" - Basic variable array type
				Value="" - Basic value type
				/> - End array type specification
			</Type> - End Type declaration
		-->
		<Type Name="VAR_INT">
			<Variable Type="VAR" Basic="INT" />
			<Array Type="VAR_ARRAY" Basic="INT" />
		</Type>
		<Type Name="VAR_FLOAT">
			<Variable Type="VAR" Basic="FLOAT" />
			<Array Type="VAR_ARRAY" Basic="FLOAT" />
		</Type>
		<Type Name="VAR_TEXT_LABEL">
			<Variable Type="VAR" Basic="TEXT_LABEL" />
			<Array Type="VAR_ARRAY" Basic="TEXT_LABEL" />
		</Type>
		<Type Name="VAR_STRING">
			<Variable Type="VAR" Basic="STRING" />
			<Array Type="VAR_ARRAY" Basic="STRING" />
		</Type>
		<Type Name="LVAR_INT">
			<Variable Type="LVAR" Basic="INT" />
			<Array Type="LVAR_ARRAY" Basic="INT" />
		</Type>
		<Type Name="LVAR_FLOAT">
			<Variable Type="LVAR" Basic="FLOAT" />
			<Array Type="LVAR_ARRAY" Basic="FLOAT" />
		</Type>
		<Type Name="LVAR_TEXT_LABEL">
			<Variable Type="LVAR" Basic="TEXT_LABEL" />
			<Array Type="LVAR_ARRAY" Basic="TEXT_LABEL" />
		</Type>
		<Type Name="LVAR_STRING">
			<Variable Type="LVAR" Basic="STRING" />
			<Array Type="LVAR_ARRAY" Basic="STRING" />
		</Type>
	</BasicTypes>
	
	<!--
	Extended Types:
		These are internal extensions of the basic type set, which build upon the basic language
		Each Type needs a 'Basic' value representing an already declared type
	-->
	<ExtendedTypes>
		<Type Name="CONST" Basic="INT">
			<Identifier>
			</Identifier>
		</Type>
		<Type Name="MODEL" Basic="CONST">
			<Width>16</Width>
		</Type>
		<Type Name="ENUM" Basic="CONST">
			
		</Type>
		<Type Name="BUFFER" Basic="TEXT_LABEL">
			<Size>128</Size>
		</Type>
		
		<!-- Hacky -->
		<!--
		<Type Name="VAR_LABEL" Basic="VAR_INT">
			<Variable Type="VAR" Basic="LABEL" />
			<Array Type="VAR_ARRAY" Basic="LABEL" />
			
		</Type>
		-->
	</ExtendedTypes>
	
	<!--
	Translations:
		Responsible for constructing translations of values by type
		
		Tags:
			<Translate>				- Creates a translation which tells the compiler how to compile values of different Type's and Size's
			Attributes:
				Type	(req.)		- Name of a Type defined in BasicTypes or ExtendedTypes
				Value				- Specifies the only Value type (Number/Label/Text etc...) this translation apllies to
				Size				- Specifies the only value size (in bits) this translation applies to (e.g. 16 if it translates a 16 bit value)
			Tags:
				<Data>				- Begins the Data definition of the translation, tags must be used to specify what to encode
				Attributes <None>
				Tags:
					<Int8>			- The compiler will encode the contained integer data (or data pulled from a value specified by the Source attribute)
					<Int16>			- ...
					<Int24>			- ...
					<Int32>			- ...
					<Float32>		- The compiler will encode the contained float data (or data pulled from a value specified by the Source attribute)
					
					| Attributes:
						Source		- Data will be retrieved from the given source (requires Attribute)
						Attribute	- Attribute of the source to retrieve data from (requires Source)
	-->
	<Translations>
		<!-- 'Value' only needs specifying if a different tranlsation is needed depending on the type of value being translated -->
		<Translate Type="COMMAND">
			<Data>
				<Int16 Source="Command" Attribute="ID" />
			</Data>
		</Translate>
		
		<!-- (Just a suggestion...) -->
		<!-- <Translate Type="COMMAND_EXT">
			<Data>
				<Int16>0xFFFF</Int16>
				<Int32 Source="Command.Hash" />
			</Data>
		</Translate> -->
		
		<!-- Compile the offset of a label given for a LABEL -->
		<Translate Type="LABEL" Value="Label">
			<Data>
				<Int8>1</Int8>
				<Int32 Source="Label" Attribute="Offset" />
			</Data>
		</Translate>
		
		<!-- Compile the value of a numeric value given for a LABEL -->
		<Translate Type="LABEL" Value="Number">
			<Data>
				<Int8>1</Int8>
				<Int32 Source="Number" Attribute="Value" />
			</Data>
		</Translate>
		
		<!-- Compile a single 'null' byte for any occurrance of the type 'NONE' - since NONE has no accepted values, this can only occur built-in to a command arg list -->
		<Translate Type="NONE">
			<Data>
				<Int8>0</Int8>
			</Data>
		</Translate>
		
		<!-- Compile the value of a numeric value given for an INT -->
		<Translate Type="INT" Size="8">
			<Data>
				<Int8>4</Int8>
				<Int8 Source="Number" Attribute="Value" />
			</Data>
		</Translate>
		<Translate Type="INT" Size="16">
			<Data>
				<Int8>5</Int8>
				<Int16 Source="Number" Attribute="Value" />
			</Data>
		</Translate>
		<Translate Type="INT" Size="32">
			<Data>
				<Int8>1</Int8>
				<Int32 Source="Number" Attribute="Value" />
			</Data>
		</Translate>
		
		<Translate Type="FLOAT" Size="32">
			<Data>
				<Int8>6</Int8>
				<Float32 Source="Number" Attribute="Value" />
			</Data>
		</Translate>
		
		<!--
		<Translate Type="FLOAT" Size="2">
			<Data>
				<Int8>6</Int8>
				<Fixed16 Source="Value" />
			</Data>
		</Translate>
		
		<Translate Type="FLOAT" Size="2">
			<Data>
				<Int8>6</Int8>
				<Float16 Source="Value" />
			</Data>
		</Translate>
		
		<Translate Type="FLOAT" Size="3">
			<Data>
				<Int8>6</Int8>
				<Float24 Source="Value" />
			</Data>
		</Translate>
		-->
		
		<Translate Type="CONST" Size="4">
			<Data>
				<Int8>1</Int8>
				<Int32 Source="Number" Attribute="Value" />
			</Data>
		</Translate>
		
		<Translate Type="TEXT_LABEL" Size="8">
			<Data>
				<Int8>9</Int8>
				<String Size="8" Source="Text" Attribute="Value" />
			</Data>
		</Translate>
		
		<Translate Type="TEXT_LABEL" Size="16">
			<Data>
				<Int8>15</Int8>
				<String Size="16" Source="Text" Attribute="Value" />
			</Data>
		</Translate>
		
		<Translate Type="STRING" Size="255">
			<Data>
				<Int8>14</Int8>
				<Int8 Source="Text" Attribute="Size" />
				<String Source="Text" Attribute="Value" />
			</Data>
		</Translate>
		
		<Translate Type="VAR_INT" Size="2">
			<Data>
				<Int8>2</Int8>
				<Int16 Source="Variable" Attribute="Index" />
			</Data>
		</Translate>
		
		<Translate Type="VAR_FLOAT" Size="2">
			<Data>
				<Int8>2</Int8>
				<Int16 Source="Variable" Attribute="Index" />
			</Data>
		</Translate>
		
		<Translate Type="VAR_TEXT_LABEL" Size="2">
			<Data>
				<Int8>10</Int8>
				<Int16 Source="Variable" Attribute="Index" />
			</Data>
		</Translate>
		
		<Translate Type="VAR_STRING" Size="2">
			<Data>
				<Int8>16</Int8>
				<Int16 Source="Variable" Attribute="Index" />
			</Data>
		</Translate>
		
		<Translate Type="LVAR_INT" Size="2">
			<Data>
				<Int8>3</Int8>
				<Int16 Source="Variable" Attribute="Index" />
			</Data>
		</Translate>
		
		<Translate Type="LVAR_FLOAT" Size="2">
			<Data>
				<Int8>3</Int8>
				<Int16 Source="Variable" Attribute="Index" />
			</Data>
		</Translate>
		
		<Translate Type="LVAR_TEXT_LABEL" Size="2">
			<Data>
				<Int8>11</Int8>
				<Int16 Source="Variable" Attribute="Index" />
			</Data>
		</Translate>
		
		<Translate Type="LVAR_STRING" Size="2">
			<Data>
				<Int8>17</Int8>
				<Int16 Source="Variable" Attribute="Index" />
			</Data>
		</Translate>
	</Translations>
</SCRambl>