<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>SCRamblUIClass</class>
 <widget class="QMainWindow" name="SCRamblUIClass">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>980</width>
    <height>700</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>SCRamblUI</string>
  </property>
  <property name="documentMode">
   <bool>true</bool>
  </property>
  <property name="dockNestingEnabled">
   <bool>false</bool>
  </property>
  <property name="dockOptions">
   <set>QMainWindow::AllowTabbedDocks|QMainWindow::AnimatedDocks|QMainWindow::VerticalTabs</set>
  </property>
  <widget class="QWidget" name="centralWidget">
   <layout class="QGridLayout" name="gridLayout">
    <property name="leftMargin">
     <number>0</number>
    </property>
    <property name="topMargin">
     <number>0</number>
    </property>
    <property name="rightMargin">
     <number>0</number>
    </property>
    <property name="bottomMargin">
     <number>0</number>
    </property>
    <item row="0" column="0">
     <widget class="QTabWidget" name="gridTabWidget">
      <property name="tabPosition">
       <enum>QTabWidget::North</enum>
      </property>
      <property name="tabShape">
       <enum>QTabWidget::Rounded</enum>
      </property>
      <property name="documentMode">
       <bool>true</bool>
      </property>
      <property name="tabsClosable">
       <bool>true</bool>
      </property>
      <property name="movable">
       <bool>true</bool>
      </property>
      <property name="tabBarAutoHide">
       <bool>false</bool>
      </property>
      <widget class="QWidget" name="gridTabWidgetPage1">
       <attribute name="title">
        <string/>
       </attribute>
       <layout class="QHBoxLayout" name="horizontalLayout">
        <property name="spacing">
         <number>0</number>
        </property>
        <property name="leftMargin">
         <number>0</number>
        </property>
        <property name="topMargin">
         <number>0</number>
        </property>
        <property name="rightMargin">
         <number>0</number>
        </property>
        <property name="bottomMargin">
         <number>0</number>
        </property>
        <item>
         <widget class="CodeEditor" name="plainTextEdit">
          <property name="font">
           <font>
            <family>Courier New</family>
           </font>
          </property>
          <property name="whatsThis">
           <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
          </property>
          <property name="styleSheet">
           <string notr="true">*{
	
	selection-background-color: rgb(0, 255, 127);
}</string>
          </property>
          <property name="frameShadow">
           <enum>QFrame::Raised</enum>
          </property>
          <property name="midLineWidth">
           <number>1</number>
          </property>
          <property name="verticalScrollBarPolicy">
           <enum>Qt::ScrollBarAlwaysOn</enum>
          </property>
          <property name="horizontalScrollBarPolicy">
           <enum>Qt::ScrollBarAlwaysOn</enum>
          </property>
          <property name="lineWrapMode">
           <enum>QPlainTextEdit::NoWrap</enum>
          </property>
          <property name="plainText">
           <string>/*********************************************
* GInput CLEO Extension
* Tactile Cheat Activation
* written by Deji
* http://gtag.gtagaming.com
* Compile with SCRambl (v1.0.41 or later)
*********************************************/

#pushcfg &quot;CaseConversion&quot; &quot;NONE&quot;
#register_var 0x8 VAR_INT player
#register_var 0xC VAR_INT scplayer
#define FUNC_AddToCheatString 0x438480
#define FUNC_GetModuleHandle 0x81E406
#define REF_CheatHashes 0x438513

// Compile with this set to 1 to enable a list of buttons in the cheat string
#define SHOW_INPUT 0
#if SHOW_INPUT
	#define FUNC_strlen 0x826330
	#define MEM_CheatString 0x969110
#endif

/*
	/* lecture */
	Scripts are run before the game fully starts to do set-ups like in the 'INIT' missions
	or continue to the beginning of a loop in a saved script) until the first WAIT
	So it's a good idea to always WAIT, unless we really need that
*/
WAIT 0

{
	LVAR_INT pCheatTable pTranslation pButtons hGInput GInput_GetSourceButtonInput
	GET_LABEL_POINTER (cheats) pCheatTable
	GET_LABEL_POINTER (buttons) pButtons
	GET_LABEL_POINTER (translation) pTranslation
	
	// Get the module handle for GInput.asi
	CALL_FUNCTION_RETURN (FUNC_GetModuleHandle, 1, 0, STRING:&quot;GInput.asi&quot;) hGInput

	// If not found, wait to warn the user
	IF hGInput = 0
		WHILE NOT IS_PLAYER_PLAYING (player)
		OR NOT IS_PLAYER_CONTROL_ON (player)
		OR IS_HELP_MESSAGE_BEING_DISPLAYED
			WAIT 0
		ENDWHILE
		PRINT_HELP_STRING &quot;Tactile Cheat Activation~n~~r~Error: GInput.asi not found!&quot;
		TERMINATE_THIS_CUSTOM_SCRIPT
	ENDIF
	
	// Get the only func we need and save it
	GET_DYNAMIC_LIBRARY_PROCEDURE (&quot;_GInput_GetSourceButtonInput@8&quot;, hGInput) GInput_GetSourceButtonInput
	
main:
	WAIT 0
	
	IF IS_PLAYER_PLAYING (player)
		LVAR_INT counter pAddr button temp_val1 temp_val2
		
		// Check for button presses
		REPEAT 14 counter
			button = counter + LEFTSHOULDER1
			
			IF NOT button == START
			AND NOT button == SELECT
				// Will return the exact input of a specific button, disregarding situational mapping
				CALL_FUNCTION_RETURN (GInput_GetSourceButtonInput, 2, 0, button, player) temp_val1
				
				// Get the address of the &quot;pressed buttons&quot; array, read the current value, write the new one
				pAddr = pButtons + counter
				READ_MEMORY (pAddr, 1, FALSE) temp_val2
				WRITE_MEMORY (pAddr, 1, temp_val1, FALSE)
				
				// If it wasn't already in the &quot;pressed buttons&quot; array, add it to the cheat string
				IF NOT temp_val1 = 0
				AND temp_val2 = 0
					// Find the appropriate ASCII character for this button so it can be hashed
					pAddr = pTranslation + counter
					READ_MEMORY (pAddr, 1, FALSE) temp_val2
					
					// Temporarily replace the cheat hashes array - the cheats will be only usable directly through this script
					READ_MEMORY (REF_CheatHashes, 4, TRUE) temp_val1
					WRITE_MEMORY (REF_CheatHashes, 4, pCheatTable, TRUE)
					
					// Pass to the func which handles PC cheats - it'll take care of everything (R* used the same method)
					CALL_FUNCTION (FUNC_AddToCheatString, 1, 1, temp_val2)
					
					// Restore the cheat hashes so PC cheats can be entered, other scripts can also have custom cheats, etc.
					WRITE_MEMORY (REF_CheatHashes, 4, temp_val1, TRUE)
				ENDIF
			ENDIF
		ENDREPEAT
		
		#if SHOW_INPUT
			// For, like, taking a video of this script and showing how the cheats are being entered...
			LVAR_INT len pCheatText pCheatEnd
			
			// Get the cheat string length and continue if we have anything to print
			CALL_FUNCTION_RETURN (FUNC_strlen, 1, 1, MEM_CheatString) len
			IF len &gt; 0
				GET_LABEL_POINTER (cheat_text) pCheatText
				
				// Only show the last 16 buttons
				IF len &gt; 16
					len = 16
				ENDIF
				
				// The cheat string is in reverse, so start from the end...
				pCheatEnd = MEM_CheatString + len
				WHILE pCheatEnd &gt; MEM_CheatString
					--pCheatEnd
					--len
					
					// [space]
					WRITE_MEMORY (pCheatText, 1, 0x20, FALSE)
					++pCheatText
					
					// Read the next/last char
					READ_MEMORY (pCheatEnd, 1, FALSE) temp_val1
					
					// Convert the cheat string char to a GXT symbol - which GInput will convert to a texture
					IF NOT temp_val1 == 0x31		// 1
						IF NOT temp_val1 == 0x32		// 2
							IF NOT temp_val1 == 0x33		// 3
								IF NOT temp_val1 == 0x34		// 4
									IF NOT temp_val1 == 0x55		// U(p)
										IF NOT temp_val1 == 0x44		// D(own)
											IF NOT temp_val1 == 0x4C		//  L(eft)
												IF NOT temp_val1 == 0x52		// R(ight)
													IF NOT temp_val1 == 0x53		// S(quare)
														IF NOT temp_val1 == 0x54		// T(riangle)
															IF NOT temp_val1 == 0x58		// X
																IF NOT temp_val1 == 0x43		// C(ircle)
																	// it looks hideous...
																	//WRITE_MEMORY (pCheatText, 1, temp_val1, FALSE)
																	//++pCheatText
																	--pCheatText
																	GOTO showinput_continue
																ELSE
																	temp_val2 = 0x6F	// o
																ENDIF
															ELSE
																temp_val2 = 0x78	// x
															ENDIF
														ELSE
															temp_val2 = 0x74	// t
														ENDIF
													ELSE
														temp_val2 = 0x71	// q
													ENDIF
												ELSE
													temp_val2 = 0x3E	// r
												ENDIF
											ELSE
												temp_val2 = 0x3C	// l
											ENDIF
										ELSE
											temp_val2 = 0x64	// d
										ENDIF
									ELSE
										temp_val2 = 0x75	// u
									ENDIF
								ELSE
									temp_val2 = 0x76	// v
								ENDIF
							ELSE
								temp_val2 = 0x6A	// j
							ENDIF
						ELSE
							temp_val2 = 0x6D	// m
						ENDIF
					ELSE
						temp_val2 = 0x6B	// k
					ENDIF
					
					// Concatenate the GXT symbol '~%c~' (where %c is the character we just got above, duh)
					WRITE_MEMORY (pCheatText, 1, 0x7E, FALSE)
					++pCheatText
					WRITE_MEMORY (pCheatText, 1, temp_val2, FALSE)
					++pCheatText
					WRITE_MEMORY (pCheatText, 1, 0x7E, FALSE)
					++pCheatText
					
					showinput_continue:
				ENDWHILE
				
				// \0 at the end, standard...
				WRITE_MEMORY (pCheatText, 1, 0, FALSE)
				
				// Add the text label
				GET_LABEL_POINTER (cheat_text) pCheatText
				ADD_TEXT_LABEL (&quot;_TAC&quot;, pCheatText)
			ELSE
				ADD_TEXT_LABEL (&quot;_TAC&quot;, &quot;&quot;)
			ENDIF
			
			// Print out the list
			USE_TEXT_COMMANDS TRUE
			SET_TEXT_SCALE (2.0, 2.0)
			SET_TEXT_SIZE 1.0
			DISPLAY_TEXT (8.0, 10.0, _TAC)
		#endif
	ENDIF
	
	GOTO main
}

#if SHOW_INPUT
	// if we're showing input, this gives us space to fit the GXT keys
	#hex
	cheat_text:
	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00		// 32
	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00		// 64
	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00		// 96
	#endhex
#endif

// Space to store which buttons are currently held, so we dont repeatedly add it
#hex
buttons:
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00			// 16
#endhex

/*
	GTASA PS2 Cheat Hashes
	Recovered from the PS2 GTASA binary.
	Cheats are encrypted by reversing a string (so the input string doesn't need reversing every time)
	and calculating a CRC hash from it. The string is formatted depending on the buttons to press:
		X = Cross
		T = Triangle
		C = Circle
		S = Square
		U = Up
		D = Down
		L = Left
		R = Right
		1 = L1
		2 = L2
		3 = R1
		4 = R2
	e.g. for the weapon cheat (first in the hash table), hashing &quot;URDLURDL4143&quot; will produce 0x518BAD1E.
	
	GTASA was the first (and perhaps last) game in the series to use hashed cheats. This means that there
	are a huge number of possible combinations (over 200,000 confirmed) which can produce the same hash.
*/
#hex
cheats:
1EAD8B51 FB747986 05027580 A5E57B20 A49EF197 	// 0
E56ECF4D 1B17F6D8 30264DA4 021E33D2 292F88AE	// 5
5402598F C91A176A 0DE5EDB4 A666C4CB E09B9F7F 	// 10
281603F0 0292842A 0D295494 EEEEA1E6 E47DBBE5 	// 15
875C86B1 B76C60D9 1FF833B5 DDA2ECE3 817C02F8 	// 20
2B4F181B 546C6509 B194B562 FBA8B3C9 5213EE53 	// 25
E116C1BA BFB3A08F 8A93579C 88F72076 98F427FD 	// 30
70BBE456 B5525F9A 0049BA49 196A8B20 4E854486 	// 35
2013E451 94F19BE8 CF20CCC3 B78FC99B 773B9521 	// 40
BDB08091 A965D112 4E6D2E9C F498B87E 490D5A82 	// 45
1CB73F10 B3FB6C9A 4D9A372A 57D0F8A6 33958F68 	// 50
54E44076 599435C3 0DD6D4E1 63C154D3 9B456E4E 	// 55
C60903ED 2D27C6F0 4FC21EC3 5FA8EFF3 E5310EB4 	// 60
CD041833 0C5FA944 F45180C5 07ECFFF5 AEF732CB 	// 65
2104BCF9 675C20F9 7C374CF2 B4736264 9A2CDF20 	// 70
2053E2CD FC6C817F 45E3CFA3 31830183 E2865BF3 	// 75
9EC12E53 9B1CC977 4E2B51E2 7A2D4EBC 1566F262 	// 80
D3576DF9 E11C79D5 333443EB 860376FA 11A7E1AC 	// 90
00000000 00000000 00000000 00000000 00000000	// 95
#endhex
#hex
translation:
// LEFTSHOULDER1-CIRCLE
&quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;U&quot; &quot;D&quot; &quot;L&quot; &quot;R&quot; 00 00 &quot;S&quot; &quot;T&quot; &quot;X&quot; &quot;C&quot; 00
#endhex
</string>
          </property>
         </widget>
        </item>
       </layout>
      </widget>
     </widget>
    </item>
   </layout>
  </widget>
  <widget class="QMenuBar" name="menuBar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>980</width>
     <height>26</height>
    </rect>
   </property>
   <property name="defaultUp">
    <bool>false</bool>
   </property>
   <property name="nativeMenuBar">
    <bool>false</bool>
   </property>
   <widget class="QMenu" name="menuFile">
    <property name="title">
     <string>&amp;File</string>
    </property>
   </widget>
   <widget class="QMenu" name="menuTools">
    <property name="title">
     <string>Tools</string>
    </property>
    <addaction name="action_Options"/>
   </widget>
   <widget class="QMenu" name="menuView">
    <property name="title">
     <string>&amp;View</string>
    </property>
    <addaction name="action_Output"/>
   </widget>
   <addaction name="menuFile"/>
   <addaction name="menuView"/>
   <addaction name="menuTools"/>
  </widget>
  <widget class="QToolBar" name="mainToolBar">
   <property name="accessibleName">
    <string>Hello</string>
   </property>
   <property name="iconSize">
    <size>
     <width>28</width>
     <height>28</height>
    </size>
   </property>
   <property name="toolButtonStyle">
    <enum>Qt::ToolButtonIconOnly</enum>
   </property>
   <attribute name="toolBarArea">
    <enum>TopToolBarArea</enum>
   </attribute>
   <attribute name="toolBarBreak">
    <bool>false</bool>
   </attribute>
   <addaction name="actionNew"/>
   <addaction name="actionOpen"/>
   <addaction name="actionSave"/>
   <addaction name="actionSaveAll"/>
   <addaction name="separator"/>
   <addaction name="actionUndo"/>
   <addaction name="actionRedo"/>
  </widget>
  <widget class="QStatusBar" name="statusBar">
   <property name="statusTip">
    <string/>
   </property>
  </widget>
  <widget class="QToolBar" name="toolBar">
   <property name="windowTitle">
    <string>toolBar</string>
   </property>
   <property name="iconSize">
    <size>
     <width>28</width>
     <height>28</height>
    </size>
   </property>
   <attribute name="toolBarArea">
    <enum>TopToolBarArea</enum>
   </attribute>
   <attribute name="toolBarBreak">
    <bool>false</bool>
   </attribute>
   <addaction name="actionBuild"/>
   <addaction name="actionBuildRun"/>
  </widget>
  <widget class="QToolBar" name="toolBar_2">
   <property name="windowTitle">
    <string>toolBar_2</string>
   </property>
   <attribute name="toolBarArea">
    <enum>TopToolBarArea</enum>
   </attribute>
   <attribute name="toolBarBreak">
    <bool>false</bool>
   </attribute>
  </widget>
  <widget class="QDockWidget" name="dockWidget">
   <property name="floating">
    <bool>false</bool>
   </property>
   <property name="features">
    <set>QDockWidget::AllDockWidgetFeatures</set>
   </property>
   <property name="allowedAreas">
    <set>Qt::AllDockWidgetAreas</set>
   </property>
   <property name="windowTitle">
    <string>Output</string>
   </property>
   <attribute name="dockWidgetArea">
    <number>8</number>
   </attribute>
   <widget class="QWidget" name="dockWidgetContents">
    <property name="autoFillBackground">
     <bool>true</bool>
    </property>
    <layout class="QVBoxLayout" name="verticalLayout">
     <property name="leftMargin">
      <number>0</number>
     </property>
     <property name="topMargin">
      <number>0</number>
     </property>
     <property name="rightMargin">
      <number>0</number>
     </property>
     <property name="bottomMargin">
      <number>0</number>
     </property>
     <item>
      <widget class="QFrame" name="frame">
       <property name="minimumSize">
        <size>
         <width>0</width>
         <height>24</height>
        </size>
       </property>
       <property name="frameShape">
        <enum>QFrame::StyledPanel</enum>
       </property>
       <property name="frameShadow">
        <enum>QFrame::Raised</enum>
       </property>
       <widget class="QComboBox" name="comboBox">
        <property name="geometry">
         <rect>
          <x>0</x>
          <y>0</y>
          <width>57</width>
          <height>22</height>
         </rect>
        </property>
        <property name="sizeAdjustPolicy">
         <enum>QComboBox::AdjustToContents</enum>
        </property>
        <item>
         <property name="text">
          <string>Build</string>
         </property>
        </item>
       </widget>
      </widget>
     </item>
     <item>
      <widget class="QTableWidget" name="tableWidget">
       <property name="alternatingRowColors">
        <bool>true</bool>
       </property>
       <column>
        <property name="text">
         <string>Position</string>
        </property>
       </column>
       <column>
        <property name="text">
         <string>Message</string>
        </property>
       </column>
      </widget>
     </item>
    </layout>
   </widget>
  </widget>
  <action name="actionNew">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/new_icon</normaloff>:/SCRamblUI/new_icon</iconset>
   </property>
   <property name="text">
    <string>&amp;New</string>
   </property>
   <property name="toolTip">
    <string>New File</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+N</string>
   </property>
  </action>
  <action name="actionOpen">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/open_icon</normaloff>:/SCRamblUI/open_icon</iconset>
   </property>
   <property name="text">
    <string>&amp;Open</string>
   </property>
   <property name="toolTip">
    <string>Open File</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+O</string>
   </property>
  </action>
  <action name="actionSave">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/save_icon</normaloff>:/SCRamblUI/save_icon</iconset>
   </property>
   <property name="text">
    <string>&amp;Save</string>
   </property>
   <property name="toolTip">
    <string>Save File</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+S</string>
   </property>
  </action>
  <action name="actionSaveAll">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/saveall_icon</normaloff>:/SCRamblUI/saveall_icon</iconset>
   </property>
   <property name="text">
    <string>Save A&amp;ll</string>
   </property>
   <property name="toolTip">
    <string>Save All</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+Shift+S</string>
   </property>
  </action>
  <action name="action_Options">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/options_icon</normaloff>:/SCRamblUI/options_icon</iconset>
   </property>
   <property name="text">
    <string>&amp;Options</string>
   </property>
   <property name="shortcut">
    <string>F10</string>
   </property>
  </action>
  <action name="actionBuild">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/build_icon</normaloff>:/SCRamblUI/build_icon</iconset>
   </property>
   <property name="text">
    <string>&amp;Build</string>
   </property>
   <property name="toolTip">
    <string>Build</string>
   </property>
   <property name="shortcut">
    <string>F7</string>
   </property>
  </action>
  <action name="actionBuildRun">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/buildrun_icon</normaloff>:/SCRamblUI/buildrun_icon</iconset>
   </property>
   <property name="text">
    <string>&amp;Build &amp; Run</string>
   </property>
   <property name="toolTip">
    <string>Build &amp; Run</string>
   </property>
   <property name="shortcut">
    <string>F5</string>
   </property>
  </action>
  <action name="actionUndo">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/undo_icon</normaloff>:/SCRamblUI/undo_icon</iconset>
   </property>
   <property name="text">
    <string>&amp;Undo</string>
   </property>
   <property name="toolTip">
    <string>Undo</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+Z</string>
   </property>
  </action>
  <action name="actionRedo">
   <property name="icon">
    <iconset resource="scramblui.qrc">
     <normaloff>:/SCRamblUI/redo_icon</normaloff>:/SCRamblUI/redo_icon</iconset>
   </property>
   <property name="text">
    <string>&amp;Redo</string>
   </property>
   <property name="toolTip">
    <string>Redo</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+Y</string>
   </property>
  </action>
  <action name="action_Output">
   <property name="checkable">
    <bool>true</bool>
   </property>
   <property name="checked">
    <bool>true</bool>
   </property>
   <property name="text">
    <string>&amp;Output</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+Shift+O</string>
   </property>
  </action>
  <zorder>dockWidget</zorder>
 </widget>
 <layoutdefault spacing="6" margin="11"/>
 <customwidgets>
  <customwidget>
   <class>CodeEditor</class>
   <extends>QPlainTextEdit</extends>
   <header>editor.h</header>
  </customwidget>
 </customwidgets>
 <tabstops>
  <tabstop>gridTabWidget</tabstop>
 </tabstops>
 <resources>
  <include location="scramblui.qrc"/>
 </resources>
 <connections>
  <connection>
   <sender>action_Output</sender>
   <signal>triggered(bool)</signal>
   <receiver>dockWidget</receiver>
   <slot>setVisible(bool)</slot>
   <hints>
    <hint type="sourcelabel">
     <x>-1</x>
     <y>-1</y>
    </hint>
    <hint type="destinationlabel">
     <x>516</x>
     <y>649</y>
    </hint>
   </hints>
  </connection>
  <connection>
   <sender>dockWidget</sender>
   <signal>visibilityChanged(bool)</signal>
   <receiver>action_Output</receiver>
   <slot>setChecked(bool)</slot>
   <hints>
    <hint type="sourcelabel">
     <x>516</x>
     <y>649</y>
    </hint>
    <hint type="destinationlabel">
     <x>-1</x>
     <y>-1</y>
    </hint>
   </hints>
  </connection>
  <connection>
   <sender>actionUndo</sender>
   <signal>triggered()</signal>
   <receiver>plainTextEdit</receiver>
   <slot>undo()</slot>
   <hints>
    <hint type="sourcelabel">
     <x>-1</x>
     <y>-1</y>
    </hint>
    <hint type="destinationlabel">
     <x>503</x>
     <y>337</y>
    </hint>
   </hints>
  </connection>
  <connection>
   <sender>actionRedo</sender>
   <signal>triggered()</signal>
   <receiver>plainTextEdit</receiver>
   <slot>redo()</slot>
   <hints>
    <hint type="sourcelabel">
     <x>-1</x>
     <y>-1</y>
    </hint>
    <hint type="destinationlabel">
     <x>503</x>
     <y>337</y>
    </hint>
   </hints>
  </connection>
 </connections>
</ui>
